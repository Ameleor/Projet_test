# Collaboration avec Kinnie

import os
from glob import glob
import pandas as pd

configfile: "config.yaml"

GENOMES = [os.path.basename(genome) for genome in glob("data/genomes/GC*")]
GENES = [os.path.splitext(os.path.basename(gene))[0] for gene in glob("data/profiles/*.hmm")]

TIMEOUT=["timeout"]

FORMATS=["_gff.tsv",".faa"]

# Règle pour vérifier si tous les fichiers de sortie existent
rule all:
    input:
        expand("results/genomes/{genome}/PGCfinder", genome=GENOMES),
        expand("data/genomes_unzip/{genome}/{genome}_protein_gff.tsv", genome=GENOMES, format=FORMATS),
        "results/lists/list_organisms.csv",
        "results/lists/list_PGC_infos.csv",
        "results/lists/list_organisms_merged.csv",
        expand("results/fasta/{genome}/{gene}.faa", gene=GENES, genome=GENOMES)

# Règle pour décompresser les génomes
rule unzip_genomes:
    input: "data/genomes/{genome}/{genome}_protein{format}.gz"
    output: "data/genomes_unzip/{genome}/{genome}_protein{format}"
    shell: "gunzip -c {input} > {output}"

# Rule to launch PGCfinder with the correct parameters on all the genomes
rule PGCfinder:
    input:
        "data/genomes_unzip/{genome}/{genome}_protein.faa"
    output:
        directory("results/genomes/{genome}/PGCfinder")
    shell:
        """
        mkdir -p {output}
        macsyfinder --mute --db-type ordered_replicon --sequence-db {input} --timeout {TIMEOUT} --models PGCFinder all -o {output}
        """

# Rule to create a file with all the names of the genomes that have been given previously with all the taxonomy and useful informations
rule list_creator:
    input:
        expand("results/genomes/{genome}/PGCfinder", genome=GENOMES),
        dirname="results/genomes"
    output:
        "results/lists/list_organisms.csv",
    shell:
        """
        find {input.dirname} -maxdepth 1 -mindepth 1 -type d -exec basename {{}} \; > {output}
        """

# Rule that accesses each genome, gathers important information from PGCfinder outputs, and puts them in a file
rule infos_retriever:
    input:
        "results/lists/list_organisms.csv"
    output:
        "results/lists/list_PGC_infos.csv"
    shell:
        """
        grep "GC" {input} | while IFS= read -r ligne; do python3 scripts/collect_infos_PGCfinder.py "$ligne"; done > {output}
        """

rule list_merger:
    input:
        "results/lists/list_PGC_infos.csv",
        "data/lists/merged_list.csv",
        "results/lists/list_organisms.csv"
    output:
        "results/lists/list_organisms_merged.csv"
    shell:
        "python3 scripts/merge_csv.py"

rule fasta_creator:
    input:
        "results/genomes/{genome}/PGCfinder",
        gene="data/profiles/{gene}.hmm"
    output:
        fasta = "results/fasta/{genome}/{gene}.faa",
    shell:
        """
        python3 scripts/fasta_getter.py {wildcards.genome} {input.gene} >> {output.fasta}
        """
